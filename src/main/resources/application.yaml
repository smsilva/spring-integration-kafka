kafka:
  topic: "${KAFKA_TOPIC:events-outbound}"
  messageKey: "${KAFKA_MESSAGE_KEY:events-inbound-key}"

spring:
  application:
    name: spring-integration-kafka

  kafka:
    bootstrap-servers: "${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}"

    consumer:
      topic: "${SPRING_KAFKA_CONSUMER_TOPIC:events-inbound}"
      client-id: "${SPRING_KAFKA_CONSUMER_CLIENT_ID:xpto.client}"
      group-id: "${SPRING_KAFKA_CONSUMER_GROUP_ID:events}"
      auto-offset-reset: earliest
      key-deserializer: com.github.smsilva.wasp.kafka.exceptions.ErrorHandlingDeserializerData
      value-deserializer: com.github.smsilva.wasp.kafka.exceptions.ErrorHandlingDeserializerData
      properties:
        spring.json.value.default.type: com.github.smsilva.wasp.kafka.entity.Data
        spring.json.type.mapping: "data:com.github.smsilva.wasp.kafka.entity.Data"
        spring.json.trusted.packages: "com.github.smsilva.*"
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.deserializer.value.function: com.github.smsilva.wasp.kafka.exceptions.FailedDataProvider

    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.value.default.type: com.github.smsilva.wasp.kafka.entity.Data
        spring.json.type.mapping: "data:com.github.smsilva.wasp.kafka.entity.Data"
        spring.json.trusted.packages: "*"

logging:
  level:
    org:
      springframework:
        kafka: INFO
        integration: INFO
